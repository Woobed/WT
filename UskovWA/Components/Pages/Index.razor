@page "/"

@inject TaskCreator TaskCreator

@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Hosting
@using System.Text.RegularExpressions
@using YouGileMethods
@using YouGileMethods.Models
@inject IWebHostEnvironment Environment

<div class="page-container">
    <div class="content-box">
        <h2 class="art-title">"Сложные деревянные изделия"</h2>
        <button @onclick="ShowModal" class="order-button">Сделать заказ</button>
    </div>
</div>

<!-- Уведомление об успешной отправке -->
@if (showSuccessNotification)
{
    <div class="notification-overlay">
        <div class="notification-box alert alert-success">
            <div class="notification-content">
                <span class="notification-close" @onclick="HideNotification">&times;</span>
                <h3>Спасибо за заказ!</h3>
                <p>Ваша заявка успешно отправлена. Мы свяжемся с вами в ближайшее время.</p>
                <p>Номер заявки: @lastOrderNumber</p>
            </div>
        </div>
    </div>
}

<!-- Модальное окно -->
@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <span class="close-button" @onclick="HideModal">&times;</span>
            <h3>Оформление заказа</h3>

            <EditForm Model="@_orderData" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>ФИО:</label>
                    <InputText @bind-Value="_orderData.Name" class="form-control" />
                    <ValidationMessage For="@(() => _orderData.Name)" />
                </div>

                <div class="form-group">
                    <label>Номер телефона:</label>
                    <InputText @bind-Value="_orderData.Phone" class="form-control" />
                    <ValidationMessage For="@(() => _orderData.Phone)" />
                </div>

                <div class="form-group">
                    <label>Email:</label>
                    <InputText @bind-Value="_orderData.Email" class="form-control" />
                    <ValidationMessage For="@(() => _orderData.Email)" />
                </div>

                <div class="form-group">
                    <label>Описание задания и ссылка на чертеж:</label>
                    <InputTextArea @bind-Value="_orderData.Description"
                    class="form-control"
                    style="height: 120px; resize: none;" />
                    <ValidationMessage For="@(() => _orderData.Description)" />
                </div>


                @*  <div class="form-group">
                    <label>Чертеж или эскиз:</label>
                    <InputFile OnChange="@HandleFileSelect"
                    class="form-control"
                    accept=".dwg,.dxf,.dwt,.dgn,.ipt,.iam,.prt,.asm,.pdf,.svg,.step,.stp,.iges,.igs,.sat" />

                    @if (_orderData.SelectedFile != null)
                    {
                        <div class="file-info mt-2">
                            Выбран файл: @_orderData.SelectedFile.Name
                            <br>Размер: @(_orderData.SelectedFile.Size / 1024) КБ
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-2">@errorMessage</div>
                    }
                </div> *@

                <button type="submit" class="submit-button" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                    }
                    Отправить заявку
                </button>
            </EditForm>
        </div>
    </div>
}

@code {

    private bool isSubmitting = false;

    private string errorMessage;
    private bool showModal = false;
    private bool showSuccessNotification = false;
    private string lastOrderNumber = "";
    private OrderModel _orderData = new();

    private void ShowModal() => showModal = true;
    private void HideModal() => showModal = false;

    private void ShowNotification()
    {
        lastOrderNumber = Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
        showSuccessNotification = true;
    }

    private void HideNotification() => showSuccessNotification = false;

    private async Task HandleFileSelect(InputFileChangeEventArgs e)
    {
        await Task.Run(() =>
        {
            try
            {
                errorMessage = null;
                var file = e.File;
                var maxFileSize = 10 * 1024 * 1024; // 10MB

                // Проверка размера файла
                if (file.Size > maxFileSize)
                {
                    errorMessage = $"Файл слишком большой. Максимальный размер: {maxFileSize / (1024 * 1024)} MB";
                    return;
                }

                // Проверка расширения
                var allowedExtensions = new[] { ".dwg", ".dxf", ".pdf", ".svg" };
                var fileExtension = Path.GetExtension(file.Name).ToLower();

                if (!allowedExtensions.Contains(fileExtension))
                {
                    errorMessage = $"Недопустимый формат файла. Разрешены: {string.Join(", ", allowedExtensions)}";
                    return;
                }

                // Сохраняем информацию о выбранном файле
                _orderData.SelectedFile = file;
            }
            catch (Exception ex)
            {
                errorMessage = $"Ошибка при выборе файла: {ex.Message}";
            }
            finally
            {
                InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;

            // Проверка наличия файла
            // if (_orderData.SelectedFile == null)
            // {
            //     errorMessage = "Пожалуйста, выберите файл";
            //     return;
            // }

            // // Чтение файла
            // using var memoryStream = new MemoryStream();
            // await _orderData.SelectedFile.OpenReadStream().CopyToAsync(memoryStream);
            // var fileContent = memoryStream.ToArray();
            // var fileName = _orderData.SelectedFile.Name;

            // // Локальное сохранение
            // var cleanName = Regex.Replace(_orderData.Name.Trim(), "[^a-zA-Z0-9а-яА-Я]", "_");
            // var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            // var fileExtension = Path.GetExtension(fileName).ToLower();
            // var newFileName = $"{cleanName}_{timestamp}{fileExtension}";

            // var uploadsFolder = Path.Combine(Environment.WebRootPath, "uploads");
            // Directory.CreateDirectory(uploadsFolder);
            // await File.WriteAllBytesAsync(Path.Combine(uploadsFolder, newFileName), fileContent);

            // Создание задачи в YouGile
            var taskData = new TaskData
                {
                    title = $"Заказ от {_orderData.Name}",
                    columnId = "44eb6e8d-bc8f-4e3c-b699-cff090307104",
                    description = $"Контактные данные:\nТелефон: {_orderData.Phone}\nEmail: {_orderData.Email}\nСсылка на чертежи: {_orderData.Description}",
                    //assignees = Array.Empty<string>(),
                    //deadline = DateTime.Now.AddDays(7).ToString("yyyy-MM-dd")
                };
            if (!await TaskCreator.CheckAuth())
            {
                errorMessage = "Ошибка авторизации в YouGile. Проверьте API-ключ.";
                return;
            }
            // 1. Сначала создаем задачу
            var taskResponse = await TaskCreator.CreateTaskAsync(taskData);

            if (taskResponse == null || string.IsNullOrEmpty(taskResponse.id))
            {
                errorMessage = "Не удалось создать задачу в YouGile";
                return;
            }

            // // 2. Затем загружаем и прикрепляем файл
            // try
            // {
            //     var fileUploadResponse = await TaskCreator.UploadFileAsync(fileContent, fileName);
            //     var chatId = await TaskCreator.GetTaskChatIdAsync(taskResponse.id);
            //     await TaskCreator.SendMessageToChatAsync(chatId, fileUploadResponse.FullUrl);
            // }
            // catch (Exception ex)
            // {
            //     // Логируем ошибку загрузки файла, но не прерываем выполнение
            //     Console.WriteLine($"Ошибка прикрепления файла: {ex.Message}");
            // }

            lastOrderNumber = taskResponse.id;
            HideModal();
            ShowNotification();
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Ошибка API YouGile: {httpEx.Message}";
            Console.WriteLine($"API Error: {httpEx.StatusCode} - {httpEx.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при отправке заявки: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isSubmitting = false;
            InvokeAsync(StateHasChanged);
        }
    }
}
}